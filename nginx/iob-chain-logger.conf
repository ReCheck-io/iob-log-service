# IoB Chain Logger API - nginx Configuration
# This configuration handles HTTPS termination, mTLS client authentication,
# and proxies requests to the Node.js HTTP API

# Upstream Node.js application
upstream iob_chain_logger {
    server localhost:4000;
    # Add more servers for load balancing if needed
    # server localhost:4001;
    # server localhost:4002;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name your-api-domain.com;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# Main HTTPS server with mTLS
server {
    listen 443 ssl http2;
    server_name your-api-domain.com;
    
    # SSL Configuration (managed by certbot)
    ssl_certificate /etc/letsencrypt/live/your-api-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-api-domain.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # mTLS Configuration
    ssl_client_certificate /etc/nginx/ssl/ca.crt;  # Your CA certificate
    ssl_verify_client on;                          # Require client certificates
    ssl_verify_depth 2;                           # Certificate chain depth
    
    # SSL Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Request size limits
    client_max_body_size 10M;
    
    # Logging
    access_log /var/log/nginx/iob-chain-logger.access.log;
    error_log /var/log/nginx/iob-chain-logger.error.log;
    
    # Health check endpoint (no client cert required for monitoring)
    location /health {
        # Allow health checks without client certificates
        ssl_verify_client optional;
        
        proxy_pass http://iob_chain_logger;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add basic headers for health endpoint
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
    }
    
    # All other endpoints require mTLS
    location / {
        # Ensure client certificate is verified
        if ($ssl_client_verify != SUCCESS) {
            return 403 "Client certificate verification failed";
        }
        
        # Proxy to Node.js application
        proxy_pass http://iob_chain_logger;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Forward client certificate information
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
        proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;
        proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
        proxy_set_header X-SSL-Client-Subject $ssl_client_s_dn;
        proxy_set_header X-SSL-Client-Issuer $ssl_client_i_dn;
        proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
        proxy_set_header X-SSL-Client-Not-Before $ssl_client_v_start;
        proxy_set_header X-SSL-Client-Not-After $ssl_client_v_end;
        
        # Proxy settings for stability
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle WebSocket upgrade (if needed in future)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
    
    # Security: Block common attack paths
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ /\.git {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# WebSocket upgrade support (for future use)
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Rate limiting (adjust as needed)
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $ssl_client_fingerprint zone=client:10m rate=20r/s;

# Apply rate limiting to API endpoints
location /api/ {
    limit_req zone=api burst=20 nodelay;
    limit_req zone=client burst=50 nodelay;
    
    # ... rest of proxy configuration ...
} 