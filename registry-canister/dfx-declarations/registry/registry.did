service: () -> {
    getAllBuildings: () -> (variant {Ok:vec record {ledgerCanisterId:principal; deployedAt:nat64; owner:principal; metadata:opt record {}; name:text; uuid:text; lastUpdated:nat64; description:text; version:text; tokenSymbol:text; tokenName:text; buildingHash:text; buildingType:opt text; location:opt text}; Err:variant {NotFound:text; ValidationError:text; Unauthorized:text; InternalError:text; Conflict:text}}) query;
    getBuilding: (text) -> (variant {Ok:record {ledgerCanisterId:principal; deployedAt:nat64; owner:principal; metadata:opt record {}; name:text; uuid:text; lastUpdated:nat64; description:text; version:text; tokenSymbol:text; tokenName:text; buildingHash:text; buildingType:opt text; location:opt text}; Err:variant {NotFound:text; ValidationError:text; Unauthorized:text; InternalError:text; Conflict:text}}) query;
    getUserBuildings: (principal) -> (variant {Ok:vec record {ledgerCanisterId:principal; deployedAt:nat64; owner:principal; metadata:opt record {}; name:text; uuid:text; lastUpdated:nat64; description:text; version:text; tokenSymbol:text; tokenName:text; buildingHash:text; buildingType:opt text; location:opt text}; Err:variant {NotFound:text; ValidationError:text; Unauthorized:text; InternalError:text; Conflict:text}}) query;
    initializeCanister: (principal) -> (variant {Ok:record {id:principal; createdAt:nat64}; Err:variant {NotFound:text; ValidationError:text; Unauthorized:text; InternalError:text; Conflict:text}});
    registerBuilding: (text, principal, principal, text, text, text, text) -> (variant {Ok:record {ledgerCanisterId:principal; deployedAt:nat64; owner:principal; metadata:opt record {}; name:text; uuid:text; lastUpdated:nat64; description:text; version:text; tokenSymbol:text; tokenName:text; buildingHash:text; buildingType:opt text; location:opt text}; Err:variant {NotFound:text; ValidationError:text; Unauthorized:text; InternalError:text; Conflict:text}});
}
